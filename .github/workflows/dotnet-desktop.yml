name: Cross-Platform Build and Release

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        platform: [ linux-x64, win-x64, osx-x64, osx-arm64 ]
        include:
          - net_version: "net9.0"
    
    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup .NET SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'

      # Create directories for the build outputs
      - name: Create release directories
        run: mkdir -p bin/${{ matrix.platform }}

      # Publish ThirtyDollarConverter.GUI project
      - name: Publish ThirtyDollarConverter.GUI
        run: |
          dotnet publish ./ThirtyDollarConverter.GUI/ThirtyDollarConverter.GUI.csproj \
            -c Release -r ${{ matrix.platform }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -o ./bin/${{ matrix.platform }}

      # Publish ThirtyDollarVisualizer project
      - name: Publish ThirtyDollarVisualizer
        run: |
          dotnet publish ./ThirtyDollarVisualizer/ThirtyDollarVisualizer.csproj \
            -c Release -r ${{ matrix.platform }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -o ./bin/${{ matrix.platform }}

      # Clean up unnecessary files before zipping
      - name: Clean up build artifacts
        run: |
          cd "./bin/${{ matrix.platform }}"
          rm -rf ./*.dll ./*.dylib ./*.so ./*.pdb ./runtimes

      # Upload the zipped release assets as artifacts
      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-release
          path: bin/${{ matrix.platform }}
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Download all artifacts (each zip in its own subdirectory)
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # Find all .zip files and list them for upload
      - name: Prepare list of zip files
        id: zips
        run: |
          echo "zip_files<<EOF" >> $GITHUB_OUTPUT
          find artifacts -name '*.zip' >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Set release tag
        id: tag
        run: echo "tag_name=pre-release-$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      # Upload the found zip files to a GitHub pre-release
      - name: Create GitHub Release (Pre-release)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag_name }}
          name: "Pre-release ${{ steps.tag.outputs.tag_name }}"
          prerelease: true
          files: ${{ steps.zips.outputs.zip_files }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  